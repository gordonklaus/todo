// Code generated by github.com/gordonklaus/dt.  DO NOT EDIT

package todo

import (
	"fmt"
	"slices"

	"github.com/gordonklaus/dt/bits"
	"golang.org/x/exp/maps"
)

var (
	_ = fmt.Print
	_ = bits.NewEncoder
	_ = maps.Keys[map[int]int]
	_ = slices.Sort[[]int]
)

type ToDo struct {
	ToDo []Item
	Done []Item
}

func (x *ToDo) Write(e *bits.Encoder) {
	e.WriteSize(func() {
		e.WriteVarUint(uint64(len(x.ToDo)))
		for _, x := range x.ToDo {
			(x).Write(e)
		}
		e.WriteVarUint(uint64(len(x.Done)))
		for _, x := range x.Done {
			(x).Write(e)
		}
	})
}

func (x *ToDo) Read(d *bits.Decoder) error {
	return d.ReadSize(func() error {
		if d.Remaining() == 0 {
			return nil
		}
		{
			var len uint64
			if err := d.ReadVarUint(&len); err != nil {
				return err
			}
			x.ToDo = make([]Item, len)
			for i := range x.ToDo {
				if err := (&(x.ToDo)[i]).Read(d); err != nil {
					return err
				}
			}
		}
		if d.Remaining() == 0 {
			return nil
		}
		{
			var len uint64
			if err := d.ReadVarUint(&len); err != nil {
				return err
			}
			x.Done = make([]Item, len)
			for i := range x.Done {
				if err := (&(x.Done)[i]).Read(d); err != nil {
					return err
				}
			}
		}
		return nil
	})
}

type Item struct {
	Description string
}

func (x *Item) Write(e *bits.Encoder) {
	e.WriteSize(func() {
		e.WriteString(x.Description)
	})
}

func (x *Item) Read(d *bits.Decoder) error {
	return d.ReadSize(func() error {
		if d.Remaining() == 0 {
			return nil
		}
		if err := d.ReadString(&x.Description); err != nil {
			return err
		}
		return nil
	})
}
